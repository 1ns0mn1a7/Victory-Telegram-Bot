import logging
import random
import redis
from enum import Enum, auto
from environs import Env
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor

from fetch_quiz import load_quiz, normalize_answer


class States(Enum):
    WAITING_ANSWER = auto()


def build_keyboard():
    keyboard = VkKeyboard(one_time=False, inline=False)
    keyboard.add_button("–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", color=VkKeyboardColor.PRIMARY)
    keyboard.add_button("–°–¥–∞—Ç—å—Å—è", color=VkKeyboardColor.NEGATIVE)
    keyboard.add_line()
    keyboard.add_button("–ú–æ–π —Å—á—ë—Ç", color=VkKeyboardColor.POSITIVE)
    return keyboard.get_keyboard()


def send_message(vk, user_id, text, keyboard=None):
    vk.messages.send(
        user_id=user_id,
        message=text,
        random_id=0,
        keyboard=keyboard
    )


def handle_new_question(vk, db, questions, user_id):
    if not questions:
        send_message(vk, user_id, "–í–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç üôà")
        return

    question, answer = random.choice(questions)
    db.hset(f"vk:quiz:{user_id}", mapping={"q": question, "a": answer})

    send_message(vk, user_id, f"–í–æ–ø—Ä–æ—Å:\n\n{question}", keyboard=build_keyboard())


def handle_give_up(vk, db, questions, user_id):
    answer = db.hget(f"vk:quiz:{user_id}", "a")
    if not answer:
        send_message(vk, user_id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å¬ª.", keyboard=build_keyboard())
        return

    send_message(vk, user_id, f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n\n{answer}", keyboard=build_keyboard())

    question_next, answer_next = random.choice(questions)
    db.hset(f"vk:quiz:{user_id}", mapping={"q": question_next, "a": answer_next})
    send_message(vk, user_id, f"–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n\n{question_next}", keyboard=build_keyboard())


def handle_solution_attempt(vk, db, user_id, text):
    correct = db.hget(f"vk:quiz:{user_id}", "a")
    if not correct:
        send_message(vk, user_id, "–ù–∞–∂–º–∏—Ç–µ ¬´–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", keyboard=build_keyboard())
        return

    user_ans = normalize_answer(text or "")
    true_ans = normalize_answer(correct)

    if user_ans == true_ans:
        send_message(vk, user_id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –î–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞–∂–º–∏ ¬´–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å¬ª",
                     keyboard=build_keyboard())
        db.delete(f"vk:quiz:{user_id}")
        db.incr(f"vk:score:{user_id}")
    else:
        send_message(vk, user_id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ... –ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë —Ä–∞–∑?", keyboard=build_keyboard())


def handle_score(vk, db, user_id):
    raw = db.get(f"vk:score:{user_id}")
    score = int(raw) if raw is not None else 0
    send_message(vk, user_id, f"–í–∞—à —Å—á—ë—Ç: {score}", keyboard=build_keyboard())


def main():
    logging.basicConfig(level=logging.ERROR, format="%(asctime)s - %(levelname)s - %(message)s")
    env = Env()
    env.read_env()

    vk_token = env("VK_GROUP_TOKEN")
    db = redis.Redis(
        host=env("REDIS_HOST"),
        port=env.int("REDIS_PORT"),
        password=env("REDIS_PASSWORD"),
        decode_responses=True,
    )

    qa = load_quiz("quiz-questions")
    questions = list(qa.items())

    vk_session = vk_api.VkApi(token=vk_token)
    vk = vk_session.get_api()
    longpoll = VkLongPoll(vk_session)

    logging.info("VK Quiz Bot –∑–∞–ø—É—â–µ–Ω!")

    for event in longpoll.listen():
        if event.type == VkEventType.MESSAGE_NEW and event.to_me:
            user_id = event.user_id
            text = event.text.strip()

            if text == "–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å":
                handle_new_question(vk, db, questions, user_id)
            elif text == "–°–¥–∞—Ç—å—Å—è":
                handle_give_up(vk, db, questions, user_id)
            elif text == "–ú–æ–π —Å—á—ë—Ç":
                handle_score(vk, db, user_id)
            elif text.lower() == "—Å—Ç–∞—Ä—Ç":
                send_message(vk, user_id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω üëã", keyboard=build_keyboard())
            else:
                handle_solution_attempt(vk, db, user_id, text)


if __name__ == "__main__":
    main()
